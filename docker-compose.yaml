version: '3.9'
services:
  postgres:
    image: postgres:14
    healthcheck:
      test: ["CMD","psql","-d","postgres://postgres:postgrespassword@postgres:5432/postgres","-c","select 1;"]
      interval: 5s
      timeout: 5s
      retries: 100
      start_period: 5s
    volumes:
    - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgrespassword
  graphql-engine:
    image: hasura/graphql-engine:v2.5.0.cli-migrations-v3
    volumes:
      - ./hasura/migrations:/hasura-migrations:rw
      - ./hasura/metadata:/hasura-metadata:rw
    ports:
      - "127.0.0.1:8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to set an admin secret
      HASURA_GRAPHQL_ADMIN_SECRET: passwordSecret
      #maindb url
      MAINDB_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: noauth
      AUTH_ACTIONS_BASE_URL: http://authService:3020
      HASURA_GRAPHQL_JWT_SECRET: |
        {
          "jwk_url":"http://authService:3020/jwk"
        }
  graphqurl:
    image: node:18
    user: node
    command: ["npx","--yes","graphqurl@1.0.1","http://127.0.0.1:8080/v1/graphql","-i","-p","3005","-a","0.0.0.0","--header", " X-Hasura-Admin-Secret: passwordSecret"]
    ports:
      - "127.0.0.1:3005:3005"
  frontend:
    image: node:18
    user: node
    working_dir: /home/node/app
    volumes:
      - ./frontend:/home/node/app
    ports:
      - "127.0.0.1:3000:3000" 
    command: ["sh","-c","npm install && npm run-script dev"]
  authService:
    image: node:18
    user: node
    working_dir: /home/node/app
    environment:
      GRAPHQL_ENDPOINT: http://graphql-engine:8080/v1/graphql
    volumes:
      - ./authService:/home/node/app
    ports:
      - "127.0.0.1:3020:3020" 
    command: ["sh","-c","npm install && npm run-script start"]
volumes:
  db_data:
